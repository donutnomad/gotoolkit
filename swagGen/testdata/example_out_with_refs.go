// Code generated by swagGen. DO NOT EDIT.
//
// This file contains Swagger documentation and Gin binding code.
// Generated from interface definitions with Swagger annotations.

package main

import (
	context "context"
	strings "strings"

	service "github.com/donutnomad/gotoolkit/swagGen/a/service"
	service2 "github.com/donutnomad/gotoolkit/swagGen/service"
	gin "github.com/gin-gonic/gin"
	cast "github.com/spf13/cast"
)

// 强制导入所有使用的类型，确保 swaggo 能正确识别
var _ service.BaseResponse[[]UserInfo]
var _ service2.BaseResponse[string]
var _ *gin.Context
var _ service.BaseResponse[UserInfo]
var _ context.Context
var _ service.BaseResponse[service.UserInfo]
var _ service.UpdateUserReq

func NewSwapAPIWrap(inner ISwapAPI) *SwapAPIWrap {
	return &SwapAPIWrap{
		inner: inner,
	}
}

func NewUserAPIWrap(inner IUserAPI) *UserAPIWrap {
	return &UserAPIWrap{
		inner: inner,
	}
}

type ISwapAPIHandler interface {
}

type IUserAPIHandler interface {
}

type SwapAPIWrap struct {
	inner ISwapAPI
}

func (a *SwapAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// SendOTP
// @Summary Send OTP (Register/Forget Password)
// @Description Send OTP to email (1 minute, 5 times per email)
// @Produce json
// @Param id2 path string true "id2"
// @Param data body SendOTPReq true "data"
// @Success 200 {object} service2.BaseResponse[string]
// @Router /api/v1/swap/v1/{id2} [post]
// @Router /api/v1/swap/v2/{id2} [post]
func (a *SwapAPIWrap) SendOTP(ctx *gin.Context) {
	id2 := ctx.Param("id2")
	var data SendOTPReq
	if !onGinBind(ctx, &data, "JSON") {
		return
	}
	var result service2.BaseResponse[string] = a.inner.SendOTP(ctx, id2, data)
	onGinResponse(ctx, result)
}

func (a *SwapAPIWrap) BindSendOTP(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "/api/v1/swap/v1/:id2", preHandlers, nil, a.SendOTP)
	a.bind(router, "POST", "/api/v1/swap/v2/:id2", preHandlers, nil, a.SendOTP)
}

func (a *SwapAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindSendOTP(router, preHandlers...)
}

type UserAPIWrap struct {
	inner IUserAPI
}

func (a *UserAPIWrap) bind(router gin.IRoutes, method, path string, preHandlers, innerHandlers []gin.HandlerFunc, f gin.HandlerFunc) {
	var basePath string
	if v, ok := router.(interface {
		BasePath() string
	}); ok {
		basePath = v.BasePath()
	}
	handlers := make([]gin.HandlerFunc, 0, len(preHandlers)+len(innerHandlers)+1)
	handlers = append(handlers, preHandlers...)
	handlers = append(handlers, innerHandlers...)
	handlers = append(handlers, f)
	router.Handle(method, strings.TrimPrefix(path, basePath), handlers...)
}

// GetUser
// @Summary 获取用户信息
// @Description 根据用户ID获取用户详细信息
// @Produce json
// @Param userId path string true "userId"
// @Success 200 {object} service.BaseResponse[UserInfo]
// @Router /api/v1/user/{userId} [get]
func (a *UserAPIWrap) GetUser(ctx *gin.Context) {
	userId := ctx.Param("userId")
	var result service.BaseResponse[UserInfo] = a.inner.GetUser(ctx, userId)
	onGinResponse(ctx, result)
}

// CreateUser
// @Summary 创建用户
// @Description 创建新用户账户
// @Produce json
// @Param user body CreateUserReq true "user"
// @Success 200 {object} service.BaseResponse[UserInfo]
// @Router /api/v1/user [post]
func (a *UserAPIWrap) CreateUser(ctx *gin.Context) {
	var user CreateUserReq
	if !onGinBind(ctx, &user, "JSON") {
		return
	}
	var result service.BaseResponse[UserInfo] = a.inner.CreateUser(ctx, user)
	onGinResponse(ctx, result)
}

// UpdateUser
// @Summary 更新用户信息
// @Description 更新现有用户的信息
// @Produce json
// @Param userId path string true "uid"
// @Param user body service.UpdateUserReq true "user"
// @Success 200 {object} service.BaseResponse[service.UserInfo]
// @Router /api/v1/user/{userId} [put]
func (a *UserAPIWrap) UpdateUser(ctx *gin.Context) {
	uid := ctx.Param("userId")
	var user service.UpdateUserReq
	if !onGinBind(ctx, &user, "JSON") {
		return
	}
	var result service.BaseResponse[service.UserInfo] = a.inner.UpdateUser(ctx, uid, user)
	onGinResponse(ctx, result)
}

// GetUserByAge
// @Summary 根据年龄获取用户
// @Description 测试 int 类型参数转换
// @Produce json
// @Param age path integer true "age"
// @Success 200 {object} service.BaseResponse[[]UserInfo]
// @Router /api/v1/user/age/{age} [get]
func (a *UserAPIWrap) GetUserByAge(ctx *gin.Context) {
	age := cast.ToInt(ctx.Param("age"))
	var result service.BaseResponse[[]UserInfo] = a.inner.GetUserByAge(ctx, age)
	onGinResponse(ctx, result)
}

// GetUserByID
// @Summary 根据ID获取用户
// @Description 测试 int64 类型参数转换
// @Produce json
// @Param id path integer true "id"
// @Success 200 {object} service.BaseResponse[UserInfo]
// @Router /api/v1/user/id/{id} [get]
func (a *UserAPIWrap) GetUserByID(ctx *gin.Context) {
	id := cast.ToInt64(ctx.Param("id"))
	var result service.BaseResponse[UserInfo] = a.inner.GetUserByID(ctx, id)
	onGinResponse(ctx, result)
}

// GetUsersByScore
// @Summary 根据分数获取用户
// @Description 测试 float64 类型参数转换
// @Produce json
// @Param score path number true "score"
// @Success 200 {object} service.BaseResponse[[]UserInfo]
// @Router /api/v1/user/score/{score} [get]
func (a *UserAPIWrap) GetUsersByScore(ctx *gin.Context) {
	score := cast.ToFloat64(ctx.Param("score"))
	var result service.BaseResponse[[]UserInfo] = a.inner.GetUsersByScore(ctx, score)
	onGinResponse(ctx, result)
}

func (a *UserAPIWrap) BindGetUser(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "/api/v1/user/:userId", preHandlers, nil, a.GetUser)
}

func (a *UserAPIWrap) BindCreateUser(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "POST", "/api/v1/user", preHandlers, nil, a.CreateUser)
}

func (a *UserAPIWrap) BindUpdateUser(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "PUT", "/api/v1/user/:userId", preHandlers, nil, a.UpdateUser)
}

func (a *UserAPIWrap) BindGetUserByAge(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "/api/v1/user/age/:age", preHandlers, nil, a.GetUserByAge)
}

func (a *UserAPIWrap) BindGetUserByID(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "/api/v1/user/id/:id", preHandlers, nil, a.GetUserByID)
}

func (a *UserAPIWrap) BindGetUsersByScore(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.bind(router, "GET", "/api/v1/user/score/:score", preHandlers, nil, a.GetUsersByScore)
}

func (a *UserAPIWrap) BindAll(router gin.IRoutes, preHandlers ...gin.HandlerFunc) {
	a.BindGetUser(router, preHandlers...)
	a.BindCreateUser(router, preHandlers...)
	a.BindUpdateUser(router, preHandlers...)
	a.BindGetUserByAge(router, preHandlers...)
	a.BindGetUserByID(router, preHandlers...)
	a.BindGetUsersByScore(router, preHandlers...)
}

func onGinBind(c *gin.Context, val any, typ string) bool {
	switch typ {
	case "JSON":
		if err := c.ShouldBindJSON(val); err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return false
		}
	case "FORM":
		if err := c.ShouldBind(val); err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return false
		}
	case "QUERY":
		if err := c.ShouldBindQuery(val); err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return false
		}
	default:
		if err := c.ShouldBind(val); err != nil {
			c.JSON(400, gin.H{"error": err.Error()})
			return false
		}
	}
	return true
}

func onGinResponse[T any](c *gin.Context, data T) {
	c.JSON(200, data)
}

func onGinBindErr(c *gin.Context, err error) {
	c.JSON(500, gin.H{"error": err.Error()})
}
