package main

import (
	"fmt"
	"strings"
)

// HTTP 方法常量
const (
	HTTPMethodGET    = "GET"
	HTTPMethodPOST   = "POST"
	HTTPMethodPUT    = "PUT"
	HTTPMethodPATCH  = "PATCH"
	HTTPMethodDELETE = "DELETE"
)

// 参数来源常量
const (
	ParamSourcePath   = "path"
	ParamSourceQuery  = "query"
	ParamSourceHeader = "header"
	ParamSourceBody   = "body"
	ParamSourceForm   = "formData"
)

// 内容类型常量
const (
	ContentTypeJSON = "json"
	ContentTypeForm = "x-www-form-urlencoded"
	ContentTypeXML  = "application/xml"
)

// 默认值常量
const (
	DefaultOutputFile = "swagger_generated.go"
	DefaultPackage    = ""
	GinContextType    = "*gin.Context"
	ContextType       = "context.Context"
)

// 代码生成模板常量
const (
	GeneratedCodeHeader = `// Code generated by swagGen. DO NOT EDIT.
//
// This file contains Swagger documentation and Gin binding code.
// Generated from interface definitions with Swagger annotations.`

	TypeReferenceComment = "// 强制导入所有使用的类型，确保 swaggo 能正确识别"
)

// GenerationConfig 生成配置结构
type GenerationConfig struct {
	// 输入参数
	Path       string   // 目录路径或文件路径
	OutputFile string   // 输出文件名
	Package    string   // 包名
	Interfaces []string // 要处理的接口名称
	Verbose    bool     // 详细输出

	// 生成选项
	EnableMiddleware  bool              // 是否启用中间件支持
	CustomTemplates   map[string]string // 自定义模板
	SkipTypeReference bool              // 是否跳过类型引用生成

	// 内部状态
	ProcessedFiles []string // 已处理的文件列表
}

// NewDefaultConfig 创建默认配置
func NewDefaultConfig() *GenerationConfig {
	return &GenerationConfig{
		OutputFile:        DefaultOutputFile,
		Package:           DefaultPackage,
		Interfaces:        []string{},
		Verbose:           false,
		EnableMiddleware:  true,
		CustomTemplates:   make(map[string]string),
		SkipTypeReference: true, // 默认跳过类型引用生成，避免生成 var _ 声明
		ProcessedFiles:    []string{},
	}
}

// Validate 验证配置的有效性
func (cfg *GenerationConfig) Validate() error {
	if cfg.Path == "" {
		return fmt.Errorf("路径参数不能为空")
	}

	if cfg.OutputFile == "" {
		cfg.OutputFile = DefaultOutputFile
	}

	// 确保输出文件以 .go 结尾
	if !strings.HasSuffix(cfg.OutputFile, ".go") {
		cfg.OutputFile += ".go"
	}

	return nil
}

// HasInterface 检查是否包含指定接口
func (cfg *GenerationConfig) HasInterface(interfaceName string) bool {
	if len(cfg.Interfaces) == 0 {
		return true // 如果没有指定接口，处理所有接口
	}

	for _, name := range cfg.Interfaces {
		if name == interfaceName {
			return true
		}
	}
	return false
}

// LogMessage 根据配置决定是否输出日志信息
func (cfg *GenerationConfig) LogMessage(format string, args ...interface{}) {
	if cfg.Verbose {
		fmt.Printf(format+"\n", args...)
	}
}

// SwagGenError 自定义错误类型，包含详细的错误信息
type SwagGenError struct {
	Type     string // 错误类型：parse, generate, file, etc.
	Message  string // 错误消息
	Detail   string // 详细信息
	Original error  // 原始错误
}

func (e *SwagGenError) Error() string {
	if e.Detail != "" {
		return fmt.Sprintf("[%s] %s: %s", e.Type, e.Message, e.Detail)
	}
	return fmt.Sprintf("[%s] %s", e.Type, e.Message)
}

func (e *SwagGenError) Unwrap() error {
	return e.Original
}

// 错误构造函数
func NewParseError(message, detail string, original error) *SwagGenError {
	return &SwagGenError{
		Type:     "parse",
		Message:  message,
		Detail:   detail,
		Original: original,
	}
}

func NewGenerateError(message, detail string, original error) *SwagGenError {
	return &SwagGenError{
		Type:     "generate",
		Message:  message,
		Detail:   detail,
		Original: original,
	}
}

func NewFileError(message, detail string, original error) *SwagGenError {
	return &SwagGenError{
		Type:     "file",
		Message:  message,
		Detail:   detail,
		Original: original,
	}
}

func NewValidationError(message, detail string) *SwagGenError {
	return &SwagGenError{
		Type:    "validation",
		Message: message,
		Detail:  detail,
	}
}
