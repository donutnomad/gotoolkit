package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

// generateFieldsFile 生成字段常量文件
func generateFieldsFile(filename string, gormModel *GormModelInfo) error {
	var sb strings.Builder

	// 添加代码生成注释
	sb.WriteString("// Code generated by setterGen. DO NOT EDIT.\n\n")

	// 写入包声明
	sb.WriteString(fmt.Sprintf("package %s\n\n", gormModel.PackageName))

	// 生成字段常量结构体
	sb.WriteString(generateFieldsStruct(gormModel))
	sb.WriteString("\n")

	// 写入文件
	err := os.WriteFile(filename, []byte(sb.String()), 0644)
	if err != nil {
		return err
	}

	// 运行goimports格式化生成的文件
	cmd := exec.Command("goimports", "-w", filename)
	if err := cmd.Run(); err != nil {
		// 如果goimports失败，不返回错误，只是跳过格式化
		fmt.Printf("警告: 运行goimports失败: %v\n", err)
	}

	return nil
}

// generateFieldsStruct 生成字段常量结构体
func generateFieldsStruct(gormModel *GormModelInfo) string {
	var sb strings.Builder

	// 生成结构体名称，去掉PO后缀（如果存在）并添加Fields后缀
	structName := gormModel.Name
	if strings.HasSuffix(structName, "PO") {
		structName = strings.TrimSuffix(structName, "PO")
	}
	fieldsVarName := strings.ToLower(structName[0:1]) + structName[1:] + "Fields"

	// 生成结构体定义
	sb.WriteString(fmt.Sprintf("var %s = struct {\n", fieldsVarName))

	// 为每个字段生成常量
	for _, field := range gormModel.Fields {
		// 生成字段定义
		fieldDef := fmt.Sprintf("\t%s string", field.Name)

		// 如果字段来自嵌入结构体，添加来源注释
		if field.SourceType != "" {
			fieldDef += fmt.Sprintf(" // from %s", field.SourceType)
		}

		sb.WriteString(fieldDef + "\n")
	}

	sb.WriteString("}{\n")

	// 为每个字段赋值
	for _, field := range gormModel.Fields {
		sb.WriteString(fmt.Sprintf("\t%s: \"%s\",\n", field.Name, field.ColumnName))
	}

	sb.WriteString("}")

	return sb.String()
}
