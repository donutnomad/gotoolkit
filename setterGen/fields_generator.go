package main

import (
	"fmt"
	"strings"

	"github.com/donutnomad/gotoolkit/internal/utils"
)

// generateFieldsFileForMultiple 生成多个结构体的字段常量文件
func generateFieldsFileForMultiple(filename string, gormModels []*GormModelInfo) error {
	if len(gormModels) == 0 {
		return fmt.Errorf("没有模型需要生成")
	}

	var sb strings.Builder

	// 添加代码生成注释
	sb.WriteString("// Code generated by setterGen. DO NOT EDIT.\n\n")

	// 写入包声明 - 使用第一个模型的包名
	sb.WriteString(fmt.Sprintf("package %s\n\n", gormModels[0].PackageName))

	// 为每个模型生成字段常量结构体
	for i, gormModel := range gormModels {
		if i > 0 {
			sb.WriteString("\n") // 模型之间添加空行
		}
		sb.WriteString(generateFieldsStruct(gormModel))
		sb.WriteString("\n")
	}

	return utils.WriteFormat(filename, []byte(sb.String()))
}

// generateFieldsFile 生成字段常量文件
func generateFieldsFile(filename string, gormModel *GormModelInfo) error {
	var sb strings.Builder

	// 添加代码生成注释
	sb.WriteString("// Code generated by setterGen. DO NOT EDIT.\n\n")

	// 写入包声明
	sb.WriteString(fmt.Sprintf("package %s\n\n", gormModel.PackageName))

	// 生成字段常量结构体
	sb.WriteString(generateFieldsStruct(gormModel))
	sb.WriteString("\n")

	return utils.WriteFormat(filename, []byte(sb.String()))
}

// generateFieldsStruct 生成字段常量结构体
func generateFieldsStruct(gormModel *GormModelInfo) string {
	var sb strings.Builder

	// 生成结构体名称，去掉PO后缀（如果存在）并添加Fields后缀
	structName := strings.TrimSuffix(gormModel.Name, "PO")
	fieldsVarName := strings.ToLower(structName[0:1]) + structName[1:] + "Fields"

	// 生成结构体定义
	sb.WriteString(fmt.Sprintf("var %s = struct {\n", fieldsVarName))

	// 为每个字段生成常量
	for _, field := range gormModel.Fields {
		// 生成字段定义
		fieldDef := fmt.Sprintf("\t%s string", field.Name)

		// 如果字段来自嵌入结构体，添加来源注释
		if field.SourceType != "" {
			fieldDef += fmt.Sprintf(" // from %s", field.SourceType)
		}

		sb.WriteString(fieldDef + "\n")
	}

	sb.WriteString("}{\n")

	// 为每个字段赋值
	for _, field := range gormModel.Fields {
		sb.WriteString(fmt.Sprintf("\t%s: \"%s\",\n", field.Name, field.ColumnName))
	}

	sb.WriteString("}")

	return sb.String()
}
