// Code generated by gormgen. DO NOT EDIT.
package example

import (
	"time"

	gsql "github.com/donutnomad/gotoolkit/lib/gsql"
	"github.com/donutnomad/gotoolkit/lib/gsql/field"
)

type UserSchemaType struct {
	ID        field.Comparable[uint64]
	OrgID     field.Comparable[uint64]
	Status    field.Pattern[string]
	CreatedAt field.Comparable[time.Time]
	fieldType User
	alias     string
	tableName string
}

func (t UserSchemaType) TableName() string {
	return t.tableName
}

func (t UserSchemaType) Alias() string {
	return t.alias
}

func (t *UserSchemaType) WithTable(tableName string) {
	tn := gsql.TableName(tableName)
	t.ID = t.ID.WithTable(&tn)
	t.OrgID = t.OrgID.WithTable(&tn)
	t.Status = t.Status.WithTable(&tn)
	t.CreatedAt = t.CreatedAt.WithTable(&tn)
}

func (t UserSchemaType) As(alias string) UserSchemaType {
	var ret = t
	ret.alias = alias
	ret.WithTable(alias)
	return ret
}

func (t UserSchemaType) ModelType() *User {
	return &t.fieldType
}

func (t UserSchemaType) ModelTypeAny() any {
	return &t.fieldType
}

func (t UserSchemaType) AllFields() field.BaseFields {
	return field.BaseFields{
		t.ID,
		t.OrgID,
		t.Status,
		t.CreatedAt,
	}
}

func (t UserSchemaType) Star() field.IField {
	if t.alias != "" {
		return gsql.StarWith(t.alias)
	}
	return gsql.StarWith(t.tableName)
}

var UserSchema = UserSchemaType{
	tableName: "users",
	ID:        field.NewComparable[uint64]("users", "id", field.FlagPrimaryKey),
	OrgID:     field.NewComparable[uint64]("users", "org_id", field.FlagIndex),
	Status:    field.NewPattern[string]("users", "status", field.FlagIndex),
	CreatedAt: field.NewComparable[time.Time]("users", "created_at", field.FlagIndex),
	fieldType: User{},
}

type OrderSchemaType struct {
	ID        field.Comparable[uint64]
	UserID    field.Comparable[uint64]
	Amount    field.Comparable[int64]
	CreatedAt field.Comparable[time.Time]
	fieldType Order
	alias     string
	tableName string
}

func (t OrderSchemaType) TableName() string {
	return t.tableName
}

func (t OrderSchemaType) Alias() string {
	return t.alias
}

func (t *OrderSchemaType) WithTable(tableName string) {
	tn := gsql.TableName(tableName)
	t.ID = t.ID.WithTable(&tn)
	t.UserID = t.UserID.WithTable(&tn)
	t.Amount = t.Amount.WithTable(&tn)
	t.CreatedAt = t.CreatedAt.WithTable(&tn)
}

func (t OrderSchemaType) As(alias string) OrderSchemaType {
	var ret = t
	ret.alias = alias
	ret.WithTable(alias)
	return ret
}

func (t OrderSchemaType) ModelType() *Order {
	return &t.fieldType
}

func (t OrderSchemaType) ModelTypeAny() any {
	return &t.fieldType
}

func (t OrderSchemaType) AllFields() field.BaseFields {
	return field.BaseFields{
		t.ID,
		t.UserID,
		t.Amount,
		t.CreatedAt,
	}
}

func (t OrderSchemaType) Star() field.IField {
	if t.alias != "" {
		return gsql.StarWith(t.alias)
	}
	return gsql.StarWith(t.tableName)
}

var OrderSchema = OrderSchemaType{
	tableName: "orders",
	ID:        field.NewComparable[uint64]("orders", "id", field.FlagPrimaryKey),
	UserID:    field.NewComparable[uint64]("orders", "user_id", field.FlagIndex),
	Amount:    field.NewComparable[int64]("orders", "amount"),
	CreatedAt: field.NewComparable[time.Time]("orders", "created_at", field.FlagIndex),
	fieldType: Order{},
}
